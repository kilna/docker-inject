#!/usr/bin/env python
import os
import sys
import getopt
import subprocess
import argparse
import yaml
import re

usage = '''Copies files into containers as per a .dockerinject config.
If explicit containers are specified, only those containers are copied into,
otherwise all containers in the config file are copied into. The
.dockerignore file is used, if present, to exclude files source the copy.
You can specify additional files to ignore using an "ignore" specification
in the config.'''

def load_conf_file(conf_file):
  if os.path.isfile(conf_file):
    try:
      with open(conf_file, 'r') as yamlfile:
       return yaml.load(yamlfile)
    except Exception as err:
      raise ValueError('Unable to read configuration file %s: %s' % ( conf_file, str(err) ))
  else:
    raise ValueError('No docker-inject configuration file %s' % conf_file)

# For more info https://docs.docker.com/engine/reference/builder/#dockerignore-file
def dockerglob_to_re(dockerglob):
  rx = re.escape(dockerglob)
  rx = re.sub( r'^\\.?\\/+', '',       rx ) # Remove leading / and ./
  rx = re.sub( r'/+$',       '/(.*)?', rx ) # Trailing slashes match dir or subs
  rx = re.sub( r'\\\*\\\*',  '.*',     rx ) # ** glob -> .* regex
  rx = re.sub( r'^\.\*/',    '(.*/)?', rx ) # Leading ** glob -> (.*/)? regex
  rx = re.sub( r'\\\*',      '[^/]*',  rx ) # * -> match many non-slash [^/]*
  rx = re.sub( r'\\\?',      '[^/]',   rx ) # ? -> match one non-slash [^/]
  # Docker glob brackets to regex brackets
  def bracket_repl(m): return '['+re.sub(r'\\-','-',m.group(1))+']'
  rx = re.sub( r'\\\[([^/]*?)\\\]', bracket_repl, rx )
  if rx[:2] == '\\!':
    rx = '(?!^' + rx[2:] + '$)' # Negate, binding to ends of string
  else:
    rx = '^'+rx+'$' # Bind ends of string
  return re.compile(rx)

def dockerignore_as_list_of_re():
  dockerignore=[]
  if os.path.isfile('.dockerignore'):
    try:
      with open('.dockerignore') as f:
        for entry in f:
          if re.match(r'^(#.*|\s*)$', entry): continue
          dockerignore.append( dockerglob_to_re( re.sub(r'[\r\n]', '', entry) ) )
    except Exception as err:
      raise ValueError( 'Unable to read .dockerignore file: %s' % str(err) )
  return dockerignore

def filter_paths( paths, regexes ):
  exclude={}
  for path in paths:
    for rx in regexes:
      if rx.pattern[:4] == '(?!^':
        remove_exclude={}
        for expath in exclude:
          if not re.match( rx, expath ): remove_exclude[expath] = None
        for x in remove_exclude: del exclude[x]
      elif re.match( rx, path ):
        exclude[path] = None
  return [ x for x in paths if x not in exclude ]

def shell_escape( str ):
  if re.search( r'(\s|\')', str ) or str == '':
    return "'" + re.sub(r"'", "'\\''", str) + "'"
  return str

def cmd_string( cmd ):
  return ' '.join( map( lambda x: shell_escape(x), cmd ) )

def docker_shell_run( container, remote_cmd, user=None, group=None, input_pipe_cmd=None, name='', cd=None, shell='sh', verbose=False ):
  docker_exec_cmd = [ 'docker', 'exec', '-i', '--privileged', container ]
  if user is not None:
    if group is not None: user += ':' + group
    docker_exec_cmd = [ 'docker', 'exec', '-i', '-u', user, container ]
  if cd is not None:
    remote_cmd = "cd "+shell_escape(cd)+"; "+remote_cmd
  cmd = docker_exec_cmd + [ shell, '-c', remote_cmd ]
  if input_pipe_cmd is not None:
    cmd = input_pipe_cmd + ['|'] + cmd
  if verbose: print('`'+cmd_string(cmd)+'`')
  try:
    result=subprocess.check_output( cmd, shell=True )
    if verbose: print(result.decode('utf8'))
    return result.decode('utf8')
  except Exception as err:
    raise ValueError( "Error during %s `%s`: %s" % ( name, remote_cmd, str(err) ) )

def assert_container_is_valid( container, containers, conf_file ):
  if container not in containers:
    raise ValueError('Specified container %s is not present in config file %s' % (container, conf_file) )
  result=subprocess.check_output( ['docker','ps','-q','--filter','name='+container,'|','wc','-l'], shell=True )
  if result.decode('ascii') != '1\n':
    raise ValueError('Specified container %s does not appear to be running' % (container) )

def get_source_paths( source, dockerignore, copy_ignore ):
  ignore = dockerignore
  for dockerglob in copy_ignore:
    ignore.append(dockerglob_to_re(dockerglob))
  paths = []
  def fixpath(p): return re.sub( r'^\.\/', '', re.sub( r'\\', '/', p ) )
  source_rx = re.compile( '^'+re.escape(fixpath(source))+'/' )
  for root, subdirs, files in os.walk(source):
    def fixpathsub(p): return re.sub( source_rx, '', fixpath(p) )
    if len(subdirs) == 0 and len(files) == 0: paths.append( fixpathsub(root)+'/' )
    for f in files:
      if root == '.': paths.append(f)
      else: paths.append( fixpathsub(root)+'/'+f )
  return filter_paths( paths, ignore )

def process_copy( container, copy, dockerignore, verbose ):
  source = copy.get( 'source', '.'  )
  dest   = copy.get( 'dest',   None )
  user   = copy.get( 'user',   None )
  group  = copy.get( 'group',  None )
  shell  = copy.get( 'shell',  None )
  if dest is None:
    raise ValueError("'dest' not specified in copy specification for container %s" % container)
  desc ='%s into %s in container %s' % ( source, dest, container )
  source_paths = get_source_paths( source, dockerignore, copy.get('ignore',[]) )
  if len(source_paths) == 0:
    raise Exception('No paths to inject in '+source+' after processing .dockerignore/.dockerinject')
  if 'pre_su' in copy:
    docker_shell_run( container, copy['pre_su'], name='pre_su for '+desc, cd=dest, verbose=verbose )
  if 'pre' in copy:
    docker_shell_run( container, copy['pre'], name='pre for'+desc, cd=dest, user=user, group=group, verbose=verbose )
  docker_shell_run( 
    container, 'tar -x -v -C '+dest,
    input_pipe_cmd=['tar','-c']+source_paths, name='tar pipe for '+desc, user=user, group=group, verbose=verbose
  )
  if 'post' in copy:
    docker_shell_run( container, copy['post'], name='post for '+desc, cd=dest, user=user, group=group, verbose=verbose )
  if 'post_su' in copy:
    docker_shell_run( container, copy['post_su'], name='post_su for '+desc, cd=dest, verbose=verbose )

def process( conf_file, containers=[], verbose=False ):
  conf = load_conf_file( conf_file )
  dockerignore = dockerignore_as_list_of_re()
  if len(containers) == 0: containers=conf.keys()
  for container in containers:
    assert_container_is_valid( container, containers, conf_file )
    if type(conf[container]) is list:
      for copy in conf[container]:
        process_copy( container, copy, dockerignore, verbose )
    elif type(conf[container]) is dict:
      process_copy( container, conf[container], dockerignore, verbose )

if __name__ == '__main__':
  parser = argparse.ArgumentParser( description=usage )
  parser.add_argument( 'containers', metavar='CONTAINER', default=None, nargs='*', help='optional container to inject files into (otherwise all contiainers in YAML config are processed)' )
  parser.add_argument( '-f', '--file', metavar='CONFIGFILE', type=str, default='.dockerinject', help='YAML configuration file to use (default behavior is to use .dockerinject)' )
  parser.add_argument( '-v', '--verbose', action='store_true', help='output additional debugging information' )
  args=parser.parse_args()
  process( args.file, containers=args.containers, verbose=args.verbose )

