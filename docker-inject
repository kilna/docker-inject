#!/usr/bin/env python
# Unbuffer stdout since we can't pass the -u flag into python via /usr/bin/env in the shebang line
import os
import sys
sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)

import getopt
import subprocess
import yaml
import re

def usage():
  print('''USAGE: docker-inject [options] [containers]

Copies files into containers as per a .dockerinject JSON config file in the local
directory.

If containers are specified, only those containers are copied to, otherwise all
containers in the config file are copied to.

OPTIONS:
--help       -h      : Shows this message
--versbose   -v      : Shows extra information
--file=FILE  -f FILE : Use a configuration file other than .dockerinject

The .dockerignore file is used, if present, to exclude files from the copy. You
can specify additional files to ignore using an "ignore" specification in the config.

Example .dockerinject config file:
''')

options, containers = getopt.getopt( sys.argv[1:], 'fvh', ['file=', 'verbose', 'help'] )

conf_file='.dockerinject'
verbose=False
for opt, arg in options:
  if opt in ('-f', '--file'):
    conf_file=arg
  elif opt in ('-v', '--verbose'):
    verbose=True
  elif opt in ('-h', '--help'):
    usage()
    exit()
  else:
    raise ValueError('Unknown command line option '+opt)

if os.path.isfile(conf_file):
  try:
    with open(conf_file, 'r') as yamlfile:
     conf=yaml.load(yamlfile)
  except Exception as err:
    raise ValueError('Unable to read configuration file %s: %s' % (conf_file,str(err)))
else:
  raise ValueError('No docker-inject configuration file %s' % conf_file)

dockerignore=[]
if os.path.isfile('.dockerignore'):
  try:
    with open('.dockerignore') as f:
      for entry in f:
        if re.match(r'^(#.*|\s*)$', entry):
          continue
        if re.match(r'^!', entry):
          raise Exception('Negated entries (ones beginning in !) not supported in .dockerignore with docker-inject')
        dockerignore.append( re.sub(r'[\r\n]', '', entry) )
  except Exception as err:
    raise ValueError('Unable to read .dockerignore file: %s' % str(err))

if len(containers) == 0:
  containers=conf.keys()

def cmd_merge(*cmds, **opts):
  as_string=False
  if 'as_string' in opts:
    as_string=opts['as_string']
  # If any of the commands are strings, force output to a string
  if any(type(cmd) is not list for cmd in cmds):
    as_string=True
  if as_string:
    # Create a shell command in string format
    out=''
    for cmd in cmds:
      if type(cmd) is list:
        for arg in cmd:
          if out != '':
            out += ' '
          if re.search(r'\s', arg) or arg == '':
            out += "'" + re.sub(r"'", "'\''", arg) + "'"
          else:
            out += arg
      else:
        if out != '':
          out += ' '
        out += cmd
    return out
  else:
    # Create a shell command in list format
    out=[]
    for cmd in cmds:
      out += cmd
    return out

def shell_run(cmd, error=None):
  if verbose:
    print('`'+cmd_merge(cmd, as_string=True)+'`')
  try:
    result=subprocess.check_output( cmd, shell=True )
    if verbose:
      print(result.decode('utf8'))
  except Exception as err:
    if error:
      raise err
    else:
      raise ValueError( "%s: %s" % (error, str(err) ) )

for container in containers:
  if container not in containers:
    raise ValueError('Specified container %s is not present in config file %s' % (container, conf_file) )
  copy_specs=[]
  if type(conf[container]) is list:
    copy_specs=conf[container]
  elif type(conf[container]) is dict:
    copy_specs=[ conf[container] ]
  for copy_spec in copy_specs:
    from_path='.'
    if 'from' in copy_spec:
      from_path=copy_spec['from']
    to_path=None
    if 'to' in copy_spec:
      to_path=copy_spec['to']
    else:
      raise ValueError("'to' not specified in copy specification for container %s" % container)
    ignore = dockerignore
    if 'ignore' in copy_spec:
      ignore += copy_spec['ignore']
    copy_desc='%s into %s in container %s' % (from_path, to_path, container )
    if verbose:
      print('Copying %s' % copy_desc)
    exclude_opts=[]
    for exclude in ignore:
      exclude = re.sub(r'/$', '', exclude)
      exclude_opts.append( '--exclude='+exclude )
    tar_create  = [ 'tar', '-c' ] + exclude_opts + [ from_path ]
    tar_extract = [ 'tar', '-x', '-C', to_path, '-v' ]
    user_opt = []
    if 'user' in copy_spec:
      user=copy_spec['user']
      if 'group' in copy_spec:
        user += ':' + copy_spec['group']
      user_opt = [ '-u', user ]
    docker_exec_user = [ 'docker', 'exec', '-i' ] + user_opt + [ container ]
    docker_exec_root = [ 'docker', 'exec', '-i', '--privileged', container ]
    shell = ['sh', '-e']
    if 'shell' in copy_spec:
      shell = copy_spec['shell']
    if verbose:
      shell += [ '-x' ]
    if 'pre_su' in copy_spec:
      shell_run(
        cmd_merge( [ 'echo', 'cd %s; %s' % (to_path, copy_spec['pre_su'] ), '|'], docker_exec_root, shell ),
        error="Failed running su pre shell '%s' before %s" % ( copy_spec['pre_su'], copy_desc )
      )
    if 'pre' in copy_spec:
      shell_run(
        cmd_merge( [ 'echo', 'cd %s; %s' % (to_path, copy_spec['pre'] ), '|'], docker_exec_user, shell ),
        error="Failed running pre shell '%s' before %s" % ( copy_spec['pre'], copy_desc )
      )
    shell_run(
      tar_create + ['|'] + docker_exec_user + tar_extract,
      error="Failed copying %s" % copy_desc
    )
